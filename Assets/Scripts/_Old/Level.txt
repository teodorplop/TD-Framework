/*using System;
using System.Reflection;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Level {
	public enum SpawnMode { Continuous, WaveCleared };

	private string name;
	private SpawnMode spawnMode;
	private bool autoStart;
	private short startingCurrency;
	private short startingHealth;
	private List<Wave> waves;

	public string Name { get { return name; } }
	public SpawnMode SpawningMode { get { return spawnMode; } }
	public bool AutoStart { get { return autoStart; } }
	public short StartingCurrency { get { return startingCurrency; } }
	public short StartingHealth { get { return startingHealth; } }
	public List<Wave> Waves { get { return waves; } }

	public Level(string data) { // Working with strings is not efficient, but it's definitely easier
		string[] rows = data.Split('\n');

		waves = new List<Wave>();
		for (int i = 0; i < rows.Length; ++i) {
			rows[i] = rows[i].Trim();

			if (rows[i].Length == 0) continue;
			if (rows[i].Length > 1 && rows[i][0] == '/' && rows[i][1] == '/') continue;

			int idx = rows[i].IndexOf('=');
			if (idx != -1) {
				if (rows[i].Length > idx) {
					string key = rows[i].Substring(0, idx - 1).Trim();
					string value = rows[i].Substring(idx + 1, rows[i].Length - idx - 1).Trim();

					Set(key, value);
				}
			} else if (rows[i][0] == '+') {
				waves.Add(new Wave());
			} else {
				var subwave = InterpretRow(rows[i]);
				if (subwave != null) waves[waves.Count - 1].subwaves.Add(subwave.Value);
			}
		}
	}

	private SubWave? InterpretRow(string row) {
		string[] columns = row.Split(',');
		if (columns.Length < 5) {
			Debug.LogError("Couldn't interpret SubWave.");
			return null;
		}

		string unitId = columns[0];
		byte numberOfUnits;
		float spawnDelay;
		float spawnInterval;
		string pathId = columns[4];

		if (!byte.TryParse(columns[1], out numberOfUnits)) { Debug.LogError("Couldn't interpret SubWave."); return null; }
		if (!float.TryParse(columns[2], out spawnDelay)) { Debug.LogError("Couldn't interpret SubWave."); return null; }
		if (!float.TryParse(columns[3], out spawnInterval)) { Debug.LogError("Couldn't interpret SubWave."); return null; }

		return new SubWave() { unitId = unitId, numberOfUnits = numberOfUnits, spawnDelay = spawnDelay, spawnInterval = spawnInterval, pathName = pathId };
	}

	private void Set(string key, string value) {
		// Keep things simple, no need for reflection this time
		if (key == "name") name = value;
		else if (key == "spawnMode") Enum.TryParse(value, out spawnMode);
		else if (key == "autoStart") bool.TryParse(value, out autoStart);
		else if (key == "startingCurrency") short.TryParse(value, out startingCurrency);
		else if (key == "startingHealth") short.TryParse(value, out startingHealth);
		else Debug.LogError("Couldn't find " + key + " variable.");
	}
}
*/